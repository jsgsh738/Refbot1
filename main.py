import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.markdown import hbold
from datetime import datetime
from keep_alive import keep_alive  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞ Render

TOKEN = "7926852495:AAFVySjZVau5_sxafIPKMeBRDFmehiIbDxI"
BONUS_INTERVAL = 6 * 60 * 60  # 6 —á–∞—Å–æ–≤

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = sqlite3.connect("firecoins.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY, 
    username TEXT, 
    ma3coins INTEGER DEFAULT 0, 
    last_bonus INTEGER DEFAULT 0,
    referrer INTEGER
)
""")
conn.commit()

# üî• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu(call):
    user_id = call.from_user.id
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", callback_data="get_bonus")],
        [InlineKeyboardButton(text="üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="top_users")],
        [InlineKeyboardButton(text="üõç –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
        [InlineKeyboardButton(text="üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="referral")]
    ])
    await call.message.edit_text(f"üíé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\nüí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {get_ma3coins(user_id)} Ma3coin\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                                 reply_markup=keyboard)

# üî• –°—Ç–∞—Ä—Ç
@dp.message(CommandStart())
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
    referrer_id = message.text.split()[-1] if len(message.text.split()) > 1 else None

    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    user_exists = cursor.fetchone()

    if not user_exists:
        cursor.execute("INSERT INTO users (user_id, username, ma3coins, referrer) VALUES (?, ?, ?, ?)",
                       (user_id, username, 0, referrer_id))
        conn.commit()

        if referrer_id and referrer_id.isdigit():
            cursor.execute("UPDATE users SET ma3coins = ma3coins + 2 WHERE user_id = ?", (int(referrer_id),))
            conn.commit()

    await main_menu(message)

# üë§ –ü—Ä–æ—Ñ–∏–ª—å
@dp.callback_query(lambda call: call.data == "profile")
async def profile(call: types.CallbackQuery):
    user_id = call.from_user.id
    username = call.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton(text="üõç –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

    await call.message.edit_text(f"üë§ {hbold(username)}, –≤–æ—Ç —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n"
                                 f"üí∞ –ë–∞–ª–∞–Ω—Å: {get_ma3coins(user_id)} Ma3coin", reply_markup=keyboard)

# üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(lambda call: call.data == "back_to_main")
async def back_to_main(call: types.CallbackQuery):
    await main_menu(call)

# üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.callback_query(lambda call: call.data == "top_users")
async def top_users(call: types.CallbackQuery):
    cursor.execute("SELECT username, ma3coins FROM users ORDER BY ma3coins DESC LIMIT 10")
    top = cursor.fetchall()
    text = "üíé <b>–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
    for i, (username, ma3coins) in enumerate(top, start=1):
        text += f"{i}. {hbold(username)} ‚Äî {ma3coins} Ma3coin\n"
    await call.message.edit_text(text, reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    ))

# üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ (—Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
@dp.callback_query(lambda call: call.data == "referral")
async def referral(call: types.CallbackQuery):
    user_id = call.from_user.id
    bot_username = (await bot.get_me()).username
    link = f"https://t.me/{bot_username}?start={user_id}"
    await call.message.answer(f"üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}")

# üõç –ú–∞–≥–∞–∑–∏–Ω
@dp.callback_query(lambda call: call.data == "shop")
async def shop(call: types.CallbackQuery):
    await call.message.edit_text("üõç –ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤! –°–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!", 
                                 reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                     [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile")]
                                 ]))

# üéÅ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞
@dp.callback_query(lambda call: call.data == "get_bonus")
async def claim_bonus(call: types.CallbackQuery):
    user_id = call.from_user.id
    cursor.execute("SELECT last_bonus FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    last_bonus = row[0] if row else 0

    now = int(datetime.now().timestamp())
    if last_bonus and now - last_bonus < BONUS_INTERVAL:
        remaining = BONUS_INTERVAL - (now - last_bonus)
        hours, minutes = divmod(remaining // 60, 60)
        await call.answer(f"‚è≥ –ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω! –ü—Ä–∏—Ö–æ–¥–∏ —á–µ—Ä–µ–∑ {hours}—á {minutes}–º.", show_alert=True)
    else:
        cursor.execute("UPDATE users SET ma3coins = ma3coins + 3, last_bonus = ? WHERE user_id = ?", (now, user_id))
        conn.commit()
        await call.answer("üéâ –¢—ã –ø–æ–ª—É—á–∏–ª +3 Ma3coin!", show_alert=True)

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

def get_ma3coins(user_id):
    cursor.execute("SELECT ma3coins FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    return row[0] if row else 0

import asyncio

async def keep_alive():
    while True:
        await asyncio.sleep(3600)  # –ë–æ—Ç –±—É–¥–µ—Ç –∂–¥–∞—Ç—å 1 —á–∞—Å –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ

if __name__ == "__main__":
    asyncio.create_task(keep_alive())  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞

