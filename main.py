import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.markdown import hbold
from aiogram.exceptions import TelegramBadRequest
from datetime import datetime

TOKEN = "YOUR_BOT_TOKEN"
CHANNEL_ID = "@Agnihachannel"
BONUS_INTERVAL = 6 * 60 * 60  # 6 —á–∞—Å–æ–≤

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = sqlite3.connect("firecoins.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY, 
    username TEXT, 
    firecoins INTEGER DEFAULT 0, 
    last_bonus INTEGER DEFAULT 0,
    referrer INTEGER
)
""")
conn.commit()

# üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(user_id):
    try:
        chat_member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return chat_member.status in ["member", "administrator", "creator"]
    except TelegramBadRequest:
        return False

# üî• –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu(message):
    user_id = message.from_user.id
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", callback_data="get_bonus")],
        [InlineKeyboardButton(text="üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="top_users")],
        [InlineKeyboardButton(text="üõç –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
        [InlineKeyboardButton(text="üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="referral")]
    ])
    await message.answer(f"üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\nüí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {get_firecoins(user_id)} üî•\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                         reply_markup=keyboard)

# üî• –°—Ç–∞—Ä—Ç
@dp.message(CommandStart())
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
    referrer_id = message.text.split()[-1] if len(message.text.split()) > 1 else None

    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    user_exists = cursor.fetchone()

    if not user_exists:
        cursor.execute("INSERT INTO users (user_id, username, firecoins, referrer) VALUES (?, ?, ?, ?)",
                       (user_id, username, 0, referrer_id))
        conn.commit()

        # üéâ –ù–∞—á–∏—Å–ª—è–µ–º 2 –æ–≥–Ω–µ–∫–æ–∏–Ω–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª
        if referrer_id and referrer_id.isdigit():
            cursor.execute("UPDATE users SET firecoins = firecoins + 2 WHERE user_id = ?", (int(referrer_id),))
            conn.commit()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await check_subscription(user_id):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üî• –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è!", url=f"https://t.me/{CHANNEL_ID[1:]}")],
            [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub")]
        ])
        await message.answer("üî• –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=keyboard)
    else:
        await main_menu(message)

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query(lambda call: call.data == "check_sub")
async def check_subscription_callback(call: types.CallbackQuery):
    user_id = call.from_user.id
    if await check_subscription(user_id):
        await main_menu(call.message)
    else:
        await call.answer("‚ùå –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!", show_alert=True)

# üë§ –ü—Ä–æ—Ñ–∏–ª—å
@dp.callback_query(lambda call: call.data == "profile")
async def profile(call: types.CallbackQuery):
    user_id = call.from_user.id
    username = call.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton(text="üõç –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

    await call.message.edit_text(f"üë§ {hbold(username)}, –≤–æ—Ç —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n"
                                 f"üí∞ –ë–∞–ª–∞–Ω—Å: {get_firecoins(user_id)} üî•", reply_markup=keyboard)

# üí∞ –ë–∞–ª–∞–Ω—Å
@dp.callback_query(lambda call: call.data == "balance")
async def balance(call: types.CallbackQuery):
    user_id = call.from_user.id
    balance = get_firecoins(user_id)
    await call.answer(f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance} üî•", show_alert=True)

# üéÅ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞
@dp.callback_query(lambda call: call.data == "get_bonus")
async def claim_bonus(call: types.CallbackQuery):
    user_id = call.from_user.id
    cursor.execute("SELECT last_bonus FROM users WHERE user_id = ?", (user_id,))
    last_bonus = cursor.fetchone()[0]

    now = int(datetime.now().timestamp())
    if last_bonus and now - last_bonus < BONUS_INTERVAL:
        remaining = BONUS_INTERVAL - (now - last_bonus)
        hours, minutes = divmod(remaining // 60, 60)
        await call.answer(f"‚è≥ –ë–æ–Ω—É—Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω! –ü—Ä–∏—Ö–æ–¥–∏ —á–µ—Ä–µ–∑ {hours}—á {minutes}–º.", show_alert=True)
    else:
        cursor.execute("UPDATE users SET firecoins = firecoins + 3, last_bonus = ? WHERE user_id = ?", (now, user_id))
        conn.commit()
        await call.answer("üéâ –¢—ã –ø–æ–ª—É—á–∏–ª +3 üî• –æ–≥–Ω–µ–∫–æ–∏–Ω–∞!", show_alert=True)

# üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.callback_query(lambda call: call.data == "top_users")
async def top_users(call: types.CallbackQuery):
    cursor.execute("SELECT username, firecoins FROM users ORDER BY firecoins DESC LIMIT 10")
    top = cursor.fetchall()
    text = "üî• <b>–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
    for i, (username, firecoins) in enumerate(top, start=1):
        text += f"{i}. {hbold(username)} ‚Äî {firecoins} üî•\n"
    await call.message.edit_text(text, reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    ))

# üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
@dp.callback_query(lambda call: call.data == "referral")
async def referral(call: types.CallbackQuery):
    user_id = call.from_user.id
    bot_username = (await bot.get_me()).username
    link = f"https://t.me/{bot_username}?start={user_id}"
    await call.answer(f"üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}", show_alert=True)

# üõç –ú–∞–≥–∞–∑–∏–Ω
@dp.callback_query(lambda call: call.data == "shop")
async def shop(call: types.CallbackQuery):
    await call.message.edit_text("üõç –ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤! –°–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!", 
                                 reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                     [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile")]
                                 ]))

# üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(lambda call: call.data == "back_to_main")
async def back_to_main(call: types.CallbackQuery):
    await main_menu(call.message)

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

def get_firecoins(user_id):
    cursor.execute("SELECT firecoins FROM users WHERE user_id = ?", (user_id,))
    return cursor.fetchone()[0] or 0

if __name__ == "__main__":
    asyncio.run(main())
    
